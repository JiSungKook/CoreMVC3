#pragma checksum "E:\www\WebMVCCore3\MyWeb\MyWeb.HomeWeb\Views\Home\Test.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "a3b91cb205330a5386ecf9a26739c9d3abd8b2f2"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Home_Test), @"mvc.1.0.view", @"/Views/Home/Test.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "E:\www\WebMVCCore3\MyWeb\MyWeb.HomeWeb\Views\_ViewImports.cshtml"
using MyWeb.HomeWeb;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "E:\www\WebMVCCore3\MyWeb\MyWeb.HomeWeb\Views\_ViewImports.cshtml"
using MyWeb.HomeWeb.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"a3b91cb205330a5386ecf9a26739c9d3abd8b2f2", @"/Views/Home/Test.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"d515280afbb24f34010e28d208872f4ac0784a77", @"/Views/_ViewImports.cshtml")]
    public class Views_Home_Test : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            WriteLiteral(@"마리아 DB 다운로드 : https://mariadb.com/downloads/#mariadb_platform
마리아 DB 접속 툴 : https://www.heidisql.com/download.php?download=portable-64


1.WebApi
* : Rest API라고도 한다.
* : RestApi에 대한 설명 : https://meetup.toast.com/posts/92

1.1 ASP.NET Core 프로젝트를 하나생성하자.
1.2 API로 프로젝트를 생성하자.

* MyWeb.HomeApi를 하나 만들어봤다.

CRUD 만들어본다.
//일반적으로 생각했을때 CRUD를 생각하는데 Rest 기준으로 CRUD를 생각해보면
// : HttpPost (Insert)
// : HttpGet (Read)
// : HttpPut (Update)
// : HttpDelete (Delete)

내장 IIS로 실행을해보면 포트가 나오죠

ex)https://localhost:44385/

포스트맨을 사용해서 테스트 해도 되지만
기존에 만들었던프로젝트에서 사용해보자.


MyWeb.HomeWeb 프로젝트에 만들어봤다.
/Views/Home/TicketList.cshtml에 만들어봄

Access to XMLHttpRequest at 'https://localhost:44385/weatherforecast' from origin 'https://localhost:5001' has been blocked by CORS policy: No 'Access-Control-Allow-Origin' header is present on the requested resource

CORS가 맞지 않다는 에러가 남
Cors를 허용해주자.


2. CORS

1. 기존 사이트에서 요청 후 오류 확인
2. Startup.cs 의 Cors 설정
3. 기존 사이트에서 요청

Cross Origin Resource Sharing : https://");
            WriteLiteral("developer.mozilla.org/ko/docs/Web/HTTP/CORS\r\n\r\n\r\n\r\n3. 콘솔을 만들어 테스트 해보자.\r\n내가 콘솔로 할일은 없지만 경험삼아 해봄\r\n콘솔에서도 api를 호출할수 있다는 뜻이니까.\r\n");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
